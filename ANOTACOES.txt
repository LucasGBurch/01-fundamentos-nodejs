1) npm init -y

Comando para criar o package.json básico, sendo que o -y é para responder yes para as perguntas e criar direto

Adicionando no arquivo do package o type modules, que é a forma atual de import (o require, conhecido por commonjs está em desuso)

Além do script npm start que coloquei, dá pra usar o httpie pra rodar em outro terminal o resultado do server, quando estiver startado é claro.
Lembrar: só o start não precisa de 'run' no comando

2) Estruturas da Aplicação:

Criar, Listar, Editar e Remover usuários (CRUD). Com método HTTP + URL.

GET (busca), POST (cria),

PUT (atualiza uma entidade com várias informações/form), 
PATCH (atualiza info ÚNICA ou específica de um recurso, tipo aceitar notificações ou não),

DELETE (deleta)

Ex: GET /users, POST /users etc

3) Postagem de dados é stateful, ou seja, tem seu estado gerenciado igual ao React. Ao restartar, os dados postados são resetados. Fazemos requisições como a POST com cabeçalhos, os famosos Headers. Por isso utilizamos setHeader e seus parâmetros antes do .end:

No res.end, fizemos o JSON.stringify(users) para retornar os dados como string de JSON em vez de um Array de dados JS.

Eis os vários tipos de cabeçalhos https://developer.mozilla.org/pt-BR/docs/Web/HTTP/Headers
Mas o típico é o 'Content-type', 'application/json'

Desse modo, a informação não vem mais num formato de texto "jogado", ele faz uma estrutura de dados/Array em JSON

HTTP Status Codes: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
